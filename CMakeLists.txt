cmake_minimum_required(VERSION 3.22)

if(PROJECT_SOURCE_DIR STREQUAL PROJECT_BINARY_DIR)
	message(FATAL_ERROR "In-source builds not allowed. Please make a new build directory and run CMake from there.\n")
endif()

# Force set cmake vars
if (WIN32)
	set(CMAKE_SYSTEM_VERSION 10.0.20348.0 CACHE STRING INTERNAL FORCE)
	set(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION 10.0.20348.0 CACHE STRING INTERNAL FORCE)
	set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON CACHE BOOL INTERNAL FORCE)
	set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE STRING INTERNAL FORCE)
	set(CMAKE_SHARED_LINKER_FLAGS_CHECKED ON CACHE BOOL INTERNAL FORCE)
	set(CMAKE_EXE_LINKER_FLAGS_CHECKED ON CACHE BOOL INTERNAL FORCE)
	set(USE_MSVC_RUNTIME_LIBRARY_DLL OFF CACHE BOOL "" FORCE)
	set(FORCE_STATIC_VCRT ON CACHE BOOL "" FORCE)
	set(CMAKE_SUPPRESS_REGENERATION ON CACHE BOOL "" FORCE)
endif()

project(galaxy LANGUAGES C CXX)
message("Starting galaxy configuration. Building for: ${CMAKE_BUILD_TYPE}")

# File properties.
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_source_files_properties(*.c LANGUAGE C)
set_source_files_properties(*.cc LANGUAGE CXX)
set_source_files_properties(*.cpp LANGUAGE CXX)
set_source_files_properties(*.h LANGUAGES C CXX)
set_source_files_properties(*.hh LANGUAGE CXX)
set_source_files_properties(*.hpp LANGUAGE CXX)
set_source_files_properties(*.inl LANGUAGE CXX)

# Options
option(GALAXY_BUILD_TESTS "Enable a target for building unit and sandbox tests." ON)

# Set to default.
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "")
set(CMAKE_SHARED_LINKER_FLAGS_PROFILE "")
set(CMAKE_C_FLAGS_DEBUG "")
set(CMAKE_C_FLAGS_RELEASE "")
set(CMAKE_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_DEBUG "")
set(CMAKE_CXX_FLAGS_RELEASE "")
set(CMAKE_EXE_LINKER_FLAGS "")
set(CMAKE_MODULE_LINKER_FLAGS "")
set(CMAKE_SHARED_LINKER_FLAGS "")
set(CMAKE_STATIC_LINKER_FLAGS "")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_DEBUG "${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "${CMAKE_MODULE_LINKER_FLAGS}")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS}")
set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS}")

# Configure properties.
set(CMAKE_CONFIGURATION_TYPES
	"Debug"
	"Release"
	CACHE STRING "" FORCE
)

if (WIN32)
	set(GALAXY_EXTERNAL_HEADERS
		"${CMAKE_SOURCE_DIR}/dependencies/freetype2-win/include"
	)

	set(GALAXY_PRECOMPILED_LIBS
		"${CMAKE_SOURCE_DIR}/dependencies/freetype2-win/win64/freetype.lib"
	)
endif()

# Add external libs.
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
add_subdirectory(dependencies/glfw3)
set_target_properties(glfw PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/glfw"
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/glfw"
    PDB_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/glfw"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/glfw"
)

set(ALSOFT_UTILS OFF CACHE BOOL "" FORCE)
set(ALSOFT_NO_CONFIG_UTIL ON CACHE BOOL "" FORCE)
set(ALSOFT_EXAMPLES OFF CACHE BOOL "" FORCE)
set(ALSOFT_INSTALL_EXAMPLES OFF CACHE BOOL "" FORCE)
set(ALSOFT_INSTALL_UTILS OFF CACHE BOOL "" FORCE)
set(ALSOFT_UPDATE_BUILD_VERSION OFF CACHE BOOL "" FORCE)
add_subdirectory(dependencies/openal)
set_target_properties(OpenAL PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    PDB_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
)

set_target_properties(common PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    PDB_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/OpenAL"
)

set(WITH_GZFILEOP ON CACHE BOOL "" FORCE)
set(ZLIB_COMPAT ON CACHE BOOL "" FORCE)
set(ZLIB_ENABLE_TESTS OFF CACHE BOOL "" FORCE)
set(ZLIB_DUAL_LINK OFF CACHE BOOL "" FORCE)
set(WITH_SANITIZER OFF CACHE BOOL "" FORCE)
set(WITH_FUZZERS OFF CACHE BOOL "" FORCE)
set(WITH_OPTIM ON CACHE BOOL "" FORCE)
set(WITH_NEW_STRATEGIES ON CACHE BOOL "" FORCE)
set(WITH_NATIVE_INSTRUCTIONS OFF CACHE BOOL "" FORCE)
set(WITH_MAINTAINER_WARNINGS OFF CACHE BOOL "" FORCE)
set(WITH_CODE_COVERAGE OFF CACHE BOOL "" FORCE)
set(WITH_INFLATE_STRICT OFF CACHE BOOL "" FORCE)
set(WITH_INFLATE_ALLOW_INVALID_DIST OFF CACHE BOOL "" FORCE)
set(WITH_UNALIGNED ON CACHE BOOL "" FORCE)
add_subdirectory(dependencies/zlib-ng)
set_target_properties(zlib PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/zlib"
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/zlib"
    PDB_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/zlib"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/output/zlib"
)

if (WIN32)
	set(FREETYPE_LIBRARY "${GALAXY_PRECOMPILED_LIBS}")
	set(FREETYPE_INCLUDE_DIRS "${GALAXY_EXTERNAL_HEADERS}")
endif()

# Set external project options.
if (WIN32)
	if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
		target_compile_options(glfw PUBLIC /MTd /WX- /EHsc /W0)
		target_compile_options(OpenAL PUBLIC /MTd /WX- /EHsc /W0)
		target_compile_options(common PUBLIC /MTd /WX- /EHsc /W0)
		target_compile_options(zlib PUBLIC /MTd /WX- /EHsc /W0)
	elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
		target_compile_options(glfw PUBLIC /MT /WX- /EHsc /W0)
		target_compile_options(OpenAL PUBLIC /MT /WX- /EHsc /W0)
		target_compile_options(common PUBLIC /MT /WX- /EHsc /W0)
		target_compile_options(zlib PUBLIC /MT /WX- /EHsc /W0)
	else()
		message(FATAL_ERROR "Could not determine build configuration. Is currently: ${CMAKE_BUILD_TYPE}")
	endif()
endif()