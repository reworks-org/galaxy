- assets should be per scene ??
- convert system to update thread/render thread/etc
- mainthread + render thread
- https://github.com/skypjack/entt/wiki/Crash-Course:-entity-component-system#dependencies
- support content scale (dpi thingy) for rml
- make sure font dpi is working with the content scale.
- state based system for character moevement + updating animation.
- need to test rml integration, maybe refer to official backend implementations.
- integrate camera into scene + key callback
- https://github.com/CedricGuillemet/ImGuizmo
- when adding mapping, add an animated tile component and then a map system that updates the animations, and batches them together into a batch stored in the system
	- then submit that to the renderer.

CODE REVIEW TODO:
- GRAPHICS.

TODO: PORT REMAINING LEGACY CODE.

4 cores minimum then threads:
1x main thread
1x render thread
1x audio thread
1x io (resource) thread that then goes to 1x job system <-> misc tasks

todo: box2d collisions, integration, etc...
todo: standard sat based collisions or box2d with no gravity...
todo: box2d conversion from in game units to pixels...
use onconstruct/destruct to register for box2d -> add b2world to world class alongside registry.

For editor:
- own scene stack for editor layer that renders to a frame buffer view port.
- Then serialize into a runtime layer / ui layer when playing, and pop editor layer.

todo: run lua.garbage_collector()?

encode output of json
- helps limit file size.
- convert to base64 then zlib.