- All code comments to be // slashes.
- All comments to have proper grammer.
- All comments to have a space after slashes.
- Use doxygen format.
- New header format:

///
/// <HEADER_NAME>.hpp
/// <PROJECT>
///
/// Refer to LICENSE.txt for more details.
///

- group headers.
- improve documentation
- RTTI
- logging
- mark classes final
- excess copying
- includes
- Types start with upper case: MyClass.
- Functions and variables start with lower case: myMethod.
- Constants are all upper case: const double PI=3.14159265358979323;.
- Macro names use upper case with underscores: INT_MAX.
- Template parameter names use camel case: InputIterator.
- All other names use snake case: unordered_map.
- Name private data with a m_
- function parameters be plain myCasing
- no _naming
- blocks all the time = {}
- shorten long lines
- use default assignment
- files should all be .hpp and .cpp
- manually state out casts (static_cast) (dynamic_cast) -> dynamic for references and pointers
- use const for function parameters when not changing that value. e.g. const int i.
- use const std::string& val for objects.
- use smart pointers
- avoid macros. use:
- give templates meaningful names
- cend() over end()
namespace my_project {
  struct Constants {
    // if the above macro would be expanded, then the following line would be:
    //   static const double 3.14159 = 3.14159;
    // which leads to a compile-time error. Sometimes such errors are hard to understand.
    static constexpr double PI = 3.14159;
  };
}
- make sure using override and final (final functions cannot be overridden)
- avoid globals.
- forward declare when possible.
- use initializer lists
- keep code simple
- reduce temporary objects.
- avoid shared pointers
- use ? operator
- use lambdas for complex string switching.
- remove std::endl -> use "\n"
- use doubles over floats
- use ++i over i++.
- use '' for characters over "".
- dont use std::bind.
- use nullptr
- const std::string& / string_view
- functions before variables.
- public before private, protected in middle.